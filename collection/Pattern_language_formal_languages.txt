In theoretical computer science, a pattern language is a formal language that can be defined as the set of all particular instances of a string of constants and variables. Pattern Languages were introduced by Dana Angluin in the context of machine learning.

Given a finite set Σ of constant symbols and a countable set "X" of variable symbols disjoint from Σ, a pattern is a finite non-empty string of symbols from Σ∪"X".
The length of a pattern "p", denoted by |"p"|, is just the number of its symbols.
The set of all patterns containing exactly "n" distinct variables (each of which may occur several times) is denoted by "P", the set of all patterns at all by "P".
A substitution is a mapping "f": "P" → "P" such that
If "p" = "f"("q") for some patterns "p", "q" ∈ "P" and some substitution "f", then "p" is said to be less general than "q", written "p"≤"q";
in that case, necessarily |"p"| ≥ |"q"| holds.
For a pattern "p", its language is defined as the set of all less general patterns that are built from constants only, formally: "L"("p") = { "s" ∈ Σ : "s" ≤ "p" }, where Σ denotes the set of all finite non-empty strings of symbols from Σ.

For example, using the constants Σ = { 0, 1 } and the variables "X" = { "x", "y", "z", ... }, the pattern 0"x"10"xx"1 ∈"P" and "xxy" ∈"P" has length 7 and 3, respectively.
An instance of the former pattern is 00"z"100"z"0"z"1 and 01"z"101"z"1"z"1, it is obtained by the substitution that maps "x" to 0"z" and to 1"z", respectively, and each other symbol to itself. Both 00"z"100"z"0"z"1 and 01"z"101"z"1"z"1 are also instances of "xxy". In fact, "L"(0"x"10"xx"1) is a subset of "L"("xxy"). The language of the pattern "x"0 and "x"1 is the set of all bit strings which denote an even and odd binary number, respectively. The language of "xx" is the set of all strings obtainable by concatenating a bit string with itself, e.g. 00, 11, 0101, 1010, 11101110 ∈ "L"("xx").

The problem of deciding whether "s" ∈ "L"("p") for an arbitrary string "s" ∈ Σ and pattern "p" is NP-complete (see picture),
and so is hence the problem of deciding "p" ≤ "q" for arbitrary patterns "p", "q".

The class of pattern languages is not closed under ...
The class of pattern languages is closed under ...

If "p", "q" ∈ "P" are patterns containing exactly one variable, then "p" ≤ "q" if and only if "L"("p") ⊆ "L"("q");
the same equivalence holds for patterns of equal length.
For patterns of different length, the above example "p" = 0"x"10"xx"1 and "q" = "xxy" shows that "L"("p") ⊆ "L"("q") may hold without implying "p" ≤ "q".
However, any two patterns "p" and "q", of arbitrary lengths, generate the same language if and only if they are equal up to consistent variable renaming.
Each pattern "p" is a common generalization of all strings in its generated language "L"("p"), modulo associativity of (⋅).

In a refined Chomsky hierarchy, the class of pattern languages is a proper superclass and subclass of the singleton and the indexed languages, respectively, but incomparable to the language classes in between; due to the latter, the pattern language class is not explicitly shown in the table below.

The class of pattern languages is incomparable with the class of finite languages, with the class of regular languages, and with the class of context-free languages:
Each singleton language is trivially a pattern language, generated by a pattern without variables.

Each pattern language can be produced by an indexed grammar:
For example, using Σ = { "a", "b", "c" } and "X" = { x, y },
the pattern "a" x "b" y "c" x "a" y "b" is generated by a grammar with nonterminal symbols "N" = { "S", "S", "S" } ∪ "X", terminal symbols "T" = Σ, index symbols "F" = { "a", "b", "c", "a", "b", "c" }, start symbol "S", and the following production rules:

An example derivation is:
  ⇒   
  ⇒   
  ⇒   
  ⇒   
  ⇒   
  ⇒ ... ⇒   
  ⇒ ... ⇒   
  ⇒ ... ⇒   

In a similar way, an index grammar can be constructed from any pattern.

Given a sample set "S" of strings, a pattern "p" is called descriptive of "S" if "S" ⊆ "L"("p"), but not "S" ⊆ "L"("q") ⊂ "L"("p") for any other pattern "q".

Given any sample set "S", a descriptive pattern for "S" can be computed by 
Based on this algorithm, the class of pattern languages can be identified in the limit from positive examples.
